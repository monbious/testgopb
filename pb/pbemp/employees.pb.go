// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testgopb/pb/emp/employees.proto

/*
Package emp is a generated protocol buffer package.

It is generated from these files:
	testgopb/pb/emp/employees.proto

It has these top-level messages:
	EmployeesRes
	Department
	EmployeesReq
*/
package pbemp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
	"testgopb/pb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmployeesRes struct {
	EmpId   int32       `protobuf:"varint,1,opt,name=EmpId" json:"EmpId,omitempty"`
	EmpName string      `protobuf:"bytes,2,opt,name=EmpName" json:"EmpName,omitempty"`
	Gender  string      `protobuf:"bytes,3,opt,name=Gender" json:"Gender,omitempty"`
	Email   string      `protobuf:"bytes,4,opt,name=Email" json:"Email,omitempty"`
	Dept    *Department `protobuf:"bytes,5,opt,name=Dept" json:"Dept,omitempty"`
	Boo     bool        `protobuf:"varint,6,opt,name=Boo" json:"Boo,omitempty"`
}

func (m *EmployeesRes) Reset()                    { *m = EmployeesRes{} }
func (m *EmployeesRes) String() string            { return proto.CompactTextString(m) }
func (*EmployeesRes) ProtoMessage()               {}
func (*EmployeesRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EmployeesRes) GetEmpId() int32 {
	if m != nil {
		return m.EmpId
	}
	return 0
}

func (m *EmployeesRes) GetEmpName() string {
	if m != nil {
		return m.EmpName
	}
	return ""
}

func (m *EmployeesRes) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *EmployeesRes) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmployeesRes) GetDept() *Department {
	if m != nil {
		return m.Dept
	}
	return nil
}

func (m *EmployeesRes) GetBoo() bool {
	if m != nil {
		return m.Boo
	}
	return false
}

type Department struct {
	DeptId   int32  `protobuf:"varint,1,opt,name=DeptId" json:"DeptId,omitempty"`
	DeptName string `protobuf:"bytes,2,opt,name=DeptName" json:"DeptName,omitempty"`
}

func (m *Department) Reset()                    { *m = Department{} }
func (m *Department) String() string            { return proto.CompactTextString(m) }
func (*Department) ProtoMessage()               {}
func (*Department) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Department) GetDeptId() int32 {
	if m != nil {
		return m.DeptId
	}
	return 0
}

func (m *Department) GetDeptName() string {
	if m != nil {
		return m.DeptName
	}
	return ""
}

type EmployeesReq struct {
	EmpId   int32  `protobuf:"varint,1,opt,name=EmpId" json:"EmpId,omitempty"`
	EmpName string `protobuf:"bytes,2,opt,name=EmpName" json:"EmpName,omitempty"`
	Gender  string `protobuf:"bytes,3,opt,name=Gender" json:"Gender,omitempty"`
	Email   string `protobuf:"bytes,4,opt,name=Email" json:"Email,omitempty"`
	DeptId  int32  `protobuf:"varint,5,opt,name=DeptId" json:"DeptId,omitempty"`
}

func (m *EmployeesReq) Reset()                    { *m = EmployeesReq{} }
func (m *EmployeesReq) String() string            { return proto.CompactTextString(m) }
func (*EmployeesReq) ProtoMessage()               {}
func (*EmployeesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EmployeesReq) GetEmpId() int32 {
	if m != nil {
		return m.EmpId
	}
	return 0
}

func (m *EmployeesReq) GetEmpName() string {
	if m != nil {
		return m.EmpName
	}
	return ""
}

func (m *EmployeesReq) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *EmployeesReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmployeesReq) GetDeptId() int32 {
	if m != nil {
		return m.DeptId
	}
	return 0
}

func init() {
	proto.RegisterType((*EmployeesRes)(nil), "emp.EmployeesRes")
	proto.RegisterType((*Department)(nil), "emp.Department")
	proto.RegisterType((*EmployeesReq)(nil), "emp.EmployeesReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Employees service

type EmployeesClient interface {
	GetEmployees(ctx context.Context, in *EmployeesReq, opts ...client.CallOption) (*EmployeesRes, error)
	SaveEmp(ctx context.Context, in *EmployeesReq, opts ...client.CallOption) (*EmployeesRes, error)
	DelEmp(ctx context.Context, in *EmployeesReq, opts ...client.CallOption) (*EmployeesRes, error)
	Update(ctx context.Context, in *EmployeesReq, opts ...client.CallOption) (*EmployeesRes, error)
}

type employeesClient struct {
	c           client.Client
	serviceName string
}

func NewEmployeesClient(serviceName string, c client.Client) EmployeesClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = pb.ResolveSVCName
	}
	return &employeesClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *employeesClient) GetEmployees(ctx context.Context, in *EmployeesReq, opts ...client.CallOption) (*EmployeesRes, error) {
	req := c.c.NewRequest(c.serviceName, "Employees.GetEmployees", in)
	out := new(EmployeesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesClient) SaveEmp(ctx context.Context, in *EmployeesReq, opts ...client.CallOption) (*EmployeesRes, error) {
	req := c.c.NewRequest(c.serviceName, "Employees.SaveEmp", in)
	out := new(EmployeesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesClient) DelEmp(ctx context.Context, in *EmployeesReq, opts ...client.CallOption) (*EmployeesRes, error) {
	req := c.c.NewRequest(c.serviceName, "Employees.DelEmp", in)
	out := new(EmployeesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesClient) Update(ctx context.Context, in *EmployeesReq, opts ...client.CallOption) (*EmployeesRes, error) {
	req := c.c.NewRequest(c.serviceName, "Employees.Update", in)
	out := new(EmployeesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Employees service

type EmployeesHandler interface {
	GetEmployees(context.Context, *EmployeesReq, *EmployeesRes) error
	SaveEmp(context.Context, *EmployeesReq, *EmployeesRes) error
	DelEmp(context.Context, *EmployeesReq, *EmployeesRes) error
	Update(context.Context, *EmployeesReq, *EmployeesRes) error
}

func RegisterEmployeesHandler(s server.Server, hdlr EmployeesHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Employees{hdlr}, opts...))
}

type Employees struct {
	EmployeesHandler
}

func (h *Employees) GetEmployees(ctx context.Context, in *EmployeesReq, out *EmployeesRes) error {
	return h.EmployeesHandler.GetEmployees(ctx, in, out)
}

func (h *Employees) SaveEmp(ctx context.Context, in *EmployeesReq, out *EmployeesRes) error {
	return h.EmployeesHandler.SaveEmp(ctx, in, out)
}

func (h *Employees) DelEmp(ctx context.Context, in *EmployeesReq, out *EmployeesRes) error {
	return h.EmployeesHandler.DelEmp(ctx, in, out)
}

func (h *Employees) Update(ctx context.Context, in *EmployeesReq, out *EmployeesRes) error {
	return h.EmployeesHandler.Update(ctx, in, out)
}

func init() { proto.RegisterFile("testgopb/pb/emp/employees.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcf, 0x4a, 0xf3, 0x40,
	0x10, 0xc0, 0xbf, 0xfd, 0xd2, 0xa4, 0xed, 0x58, 0x50, 0x17, 0x91, 0xa5, 0x17, 0x43, 0xbc, 0xe4,
	0x94, 0x6a, 0x05, 0xcf, 0x22, 0x0d, 0xc5, 0x8b, 0x87, 0x15, 0x1f, 0x60, 0x43, 0x06, 0x11, 0xb2,
	0xdd, 0x31, 0x59, 0x04, 0xef, 0xbe, 0x89, 0x6f, 0xe5, 0xd3, 0xc8, 0x6e, 0xda, 0x24, 0xe2, 0xa5,
	0x1e, 0x3c, 0x04, 0xe6, 0x37, 0x7f, 0xb2, 0xbf, 0x59, 0x16, 0xce, 0x2c, 0x36, 0xf6, 0xc9, 0x50,
	0xb1, 0xa0, 0x62, 0x81, 0x9a, 0xdc, 0x57, 0x99, 0x37, 0xc4, 0x26, 0xa3, 0xda, 0x58, 0xc3, 0x03,
	0xd4, 0x94, 0x7c, 0x30, 0x98, 0xe5, 0xbb, 0x82, 0xc4, 0x86, 0x9f, 0x40, 0x98, 0x6b, 0xba, 0x2b,
	0x05, 0x8b, 0x59, 0x1a, 0xca, 0x16, 0xb8, 0x80, 0x71, 0xae, 0xe9, 0x5e, 0x69, 0x14, 0xff, 0x63,
	0x96, 0x4e, 0xe5, 0x0e, 0xf9, 0x29, 0x44, 0x6b, 0xdc, 0x94, 0x58, 0x8b, 0xc0, 0x17, 0xb6, 0xd4,
	0xfe, 0x47, 0x3d, 0x57, 0x62, 0xe4, 0xd3, 0x2d, 0xf0, 0x73, 0x18, 0xad, 0x90, 0xac, 0x08, 0x63,
	0x96, 0x1e, 0x2c, 0x0f, 0x33, 0xd4, 0x94, 0xad, 0x90, 0x54, 0x6d, 0x35, 0x6e, 0xac, 0xf4, 0x45,
	0x7e, 0x04, 0xc1, 0xad, 0x31, 0x22, 0x8a, 0x59, 0x3a, 0x91, 0x2e, 0x4c, 0x6e, 0x00, 0xfa, 0x2e,
	0x77, 0xa4, 0xeb, 0xeb, 0x1c, 0xb7, 0xc4, 0xe7, 0x30, 0x71, 0xd1, 0xc0, 0xb2, 0xe3, 0xe4, 0xfd,
	0xfb, 0x9e, 0x2f, 0x7f, 0xbc, 0x67, 0xaf, 0x18, 0x0e, 0x15, 0x97, 0x9f, 0x0c, 0xa6, 0x9d, 0x06,
	0xbf, 0x86, 0xd9, 0x1a, 0x6d, 0xcf, 0xc7, 0xfe, 0x3e, 0x86, 0x9a, 0xf3, 0x1f, 0xa9, 0x26, 0xf9,
	0xc7, 0x2f, 0x61, 0xfc, 0xa0, 0x5e, 0x31, 0xd7, 0xb4, 0xf7, 0xc8, 0x85, 0x13, 0xaa, 0x7e, 0x39,
	0xf1, 0x48, 0xa5, 0xb2, 0xb8, 0xef, 0x44, 0x11, 0xf9, 0x77, 0x75, 0xf5, 0x15, 0x00, 0x00, 0xff,
	0xff, 0xb6, 0x81, 0x02, 0x40, 0x7a, 0x02, 0x00, 0x00,
}
